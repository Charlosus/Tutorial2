Jaka jest różnica między dobrym a złym kodem?



Do tej pory głównym kryterium było: dobry kod działa bez błędów, a zły — nie. W praktyce jest 
to jednak bardziej skomplikowane. Współczesny produkt rzadko ma bazę
 kodu mniejszą niż 100 000 linii. To, że działa — to dobrze, ale to nie wystarczy. Ważne są 
 również poniższe kryteria:

Niezawodność — nawet bardzo obszerne i skomplikowane oprogramowanie musi działać stabilnie.
Skalowalność — możliwość łatwej adaptacji oprogramowania do rosnącego obciążenia.
Adaptacyjność — produkt musi być elastyczny, aby szybko zmieniać funkcjonalność/interfejs.
Koszt — obniżenie kosztów rozwoju i zwiększenie efektywności są ważne dla skutecznej konkurencji
 na rynku.


Aby stworzyć kod, który spełni te wymagania, potrzebne jest albo ogromne doświadczenie praktyczne
 (co nie zawsze jest możliwe), albo znajomość zasad tworzenia 
poprawnego kodu. Więc przyjrzyjmy się głównym paradygmatom programowania i porównajmy ich mocne
 i słabe strony.



Programowanie proceduralne

Programowanie proceduralne to paradygmat programowania, w którym programy są strukturyzowane
 jako zestaw funkcji, które wykonują określone działania na danych.

Główne koncepcje programowania proceduralnego obejmują:

Procedury (funkcje): Podstawową jednostką programu są funkcje. Są one przeznaczone do wykonywania 
konkretnych zadań. Funkcje przyjmują argumenty (dane wejściowe),
 przetwarzają je i mogą zwracać wynik (dane wyjściowe).
Zmienne lokalne i globalne: Zmienne zadeklarowane w obrębie funkcji są lokalne i dostępne tylko
 w tej funkcji. Zmienne zadeklarowane poza funkcjami są globalne i 
dostępne w całym programie.




Kod proceduralny to zestaw funkcji i zmiennych do przechowywania i przetwarzania informacji,
 które nie są wyraźnie powiązane.

To podejście jest proste i bezpośrednie. Może być używane do zadań, w których nie ma ściśle 
powiązanych jednostek (danych i funkcji do ich przetwarzania).




Rozważmy przykład kodu proceduralnego, w którym istnieją zmienne globalne i funkcja do obliczania wyniku.

const baseSalary = 30000;
const overtime = 10;
const rate = 20;

const getWage = (baseSalary, overtime, rate) => {
  return baseSalary + overtime * rate;
};

getWage(baseSalary, overtime, rate);

Programowanie proceduralne to sposób, w jaki dotychczas pisaliśmy kod razem. Jest to proste, 
zrozumiałe i może być używane do pisania nieskomplikowanych programów. 
Jednak wraz ze wzrostem złożoności programu podejście proceduralne może stać się nieskuteczne, 
ponieważ traci się związek między danymi a metodami ich przetwarzania.
Programowanie obiektowe (OOP) to paradygmat programowania, w którym programy są strukturyzowane
 jako zbiór obiektów. Te obiekty reprezentują rzeczywiste lub abstrakcyjne 
byty: użytkownik, sklep, samochód itp. Każdy z obiektów zawiera dane (właściwości) i metody do
 interakcji z nimi.




Przepiszmy kod z poprzedniego przykładu z zastosowaniem OOP.

Aby to zrobić, połączymy dane i funkcję ich przetwarzania w obiekt employee.

const employee = {
  baseSalary: 30000,
  overtime: 10,
  rate: 20,
  getWage() {
    return this.baseSalary + this.overtime * this.rate;
  },
};

employee.getWage();

W takim podejściu nie ma lub prawie nie ma zmiennych globalnych. Metody nie zależą od parametrów,
 lecz wykorzystują właściwości obiektu, które są ustawiane podczas jego tworzenia 
i mogą być zmieniane przez inne metody.
Programowanie w stylu OOP pomaga strukturyzować kod, ułatwia jego rozwój i utrzymanie oraz pozwala 
tworzyć bardziej złożone programy zorganizowane wokół obiektów i ich interakcji.
Aby zrozumieć podstawowe koncepcje programowania obiektowego, ważne jest opanowanie podstawowych 
terminów. Najłatwiej będzie je wyjaśnić na analogii do czegoś z rzeczywistego świata.



Wyobraźmy sobie, że projektujemy samochód. O czym warto pomyśleć z góry?

Będzie miał silnik, cztery koła, zbiornik paliwa i inne części zamienne. Samochód powinien wykonywać
 określone czynności: uruchamiać się, zwiększać i zmniejszać prędkość itd. Musimy 
także wiedzieć, jak działa silnik i koła, czyli na jakich zasadach różne części maszyny współdziałają
 ze sobą.




W projekcie trzeba opisać:

wszystkie części, z których składa się samochód
w jaki sposób te części współdziałają ze sobą
co powinien zrobić kierowca, aby samochód się zatrzymał, włączyły się światła itp.


Wynikiem naszej pracy będzie jeden określony szkic (wzór, schemat, projekt), na podstawie którego
 w przyszłości będzie tworzona nieograniczona liczba samochodów. Właśnie zaprojektowaliśmy 
to, co w programowaniu obiektowym nazywa się klasą.

Klasa — to sposób opisu bytu, który określa strukturę i zachowanie obiektów, a także zasady interakcji
 z tym bytem (kontrakt). Występują one w roli wzorców do tworzenia nowych obiektów.

W naszym przykładzie klasa definiuje byt: samochód.

Właściwościami klasy będą części zamienne: silnik, koła, światła itp.

Metodami klasy będą czynności: otworzyć drzwi, uruchomić silnik, zwiększyć prędkość itp.
Siadając za kierownicą samochodu, widzimy określony zestaw elementów sterujących, z którymi możemy 
wchodzić w interakcje.



Interfejs — to zestaw właściwości i metod klasy dostępnych do wykorzystania podczas pracy z instancją.



W istocie, interfejs opisuje klasę, jasno określając wszystkie możliwe działania, które można na niej wykonać.



Dobrym przykładem interfejsu jest deska rozdzielcza samochodu, która pozwala wywoływać metody, na przykład
 zwiększanie prędkości, hamowanie, skręcanie, zmiana biegów, włączanie świateł itp.




Opisując interfejs klasy, bardzo ważne jest zachowanie równowagi między elastycznością a prostotą.

Klasa z prostym interfejsem jest łatwa w użyciu, ale będą istnieć zadania, które za jego pomocą będzie
 trudno rozwiązać.

Jeśli interfejs będzie elastyczny, to prawdopodobnie będzie zawierał dość skomplikowane metody z dużą liczbą parametrów.
 Taki interfejs pozwoli wykonać bardzo wiele działań, ale jego użycie będzie związane z trudnościami i ryzykiem popełnienia 
 błędu, które pojawią się np. w wyniku pomylenia ustawień.